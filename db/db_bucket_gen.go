// Code generated by "github.com/hsfzxjy/imbed/db/bucketgen"; DO NOT EDIT.

package db

import "go.etcd.io/bbolt"

var bucketNames = [...][]byte{
	[]byte("FILES"),
	[]byte("f_meta"),
	[]byte("F_SHA__OID"),
	[]byte("F_FHASH_OID"),
	[]byte("F_BASENAME_OID"),
	[]byte("F_URL_OID"),
	[]byte("F_FHASH_TSSHA__OID"),
	[]byte("T_FOID_TAG"),
	[]byte("T_TAG__FOID"),
	[]byte("T_COID_FOID"),
	[]byte("CONFIGS"),
	[]byte("C_SHA__OID"),
}

func (tx *Tx) createAllBuckets() error {
	for _, name := range bucketNames {
		if _, err := tx.CreateBucketIfNotExists(name); err != nil {
			return err
		}
	}
	return nil
}

func (tx *Tx) FILES() *bbolt.Bucket {
	slot := &tx.buckets[0]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[0])
		if b == nil {
			panic("fatal: bucket FILES not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) f_meta() *bbolt.Bucket {
	slot := &tx.buckets[1]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[1])
		if b == nil {
			panic("fatal: bucket f_meta not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) F_SHA__OID() *bbolt.Bucket {
	slot := &tx.buckets[2]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[2])
		if b == nil {
			panic("fatal: bucket F_SHA__OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) F_FHASH_OID() *bbolt.Bucket {
	slot := &tx.buckets[3]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[3])
		if b == nil {
			panic("fatal: bucket F_FHASH_OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) F_BASENAME_OID() *bbolt.Bucket {
	slot := &tx.buckets[4]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[4])
		if b == nil {
			panic("fatal: bucket F_BASENAME_OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) F_URL_OID() *bbolt.Bucket {
	slot := &tx.buckets[5]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[5])
		if b == nil {
			panic("fatal: bucket F_URL_OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) F_FHASH_TSSHA__OID() *bbolt.Bucket {
	slot := &tx.buckets[6]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[6])
		if b == nil {
			panic("fatal: bucket F_FHASH_TSSHA__OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) T_FOID_TAG() *bbolt.Bucket {
	slot := &tx.buckets[7]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[7])
		if b == nil {
			panic("fatal: bucket T_FOID_TAG not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) T_TAG__FOID() *bbolt.Bucket {
	slot := &tx.buckets[8]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[8])
		if b == nil {
			panic("fatal: bucket T_TAG__FOID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) T_COID_FOID() *bbolt.Bucket {
	slot := &tx.buckets[9]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[9])
		if b == nil {
			panic("fatal: bucket T_COID_FOID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) CONFIGS() *bbolt.Bucket {
	slot := &tx.buckets[10]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[10])
		if b == nil {
			panic("fatal: bucket CONFIGS not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}

func (tx *Tx) C_SHA__OID() *bbolt.Bucket {
	slot := &tx.buckets[11]
	slot.Do(func() {
		b := tx.Bucket(bucketNames[11])
		if b == nil {
			panic("fatal: bucket C_SHA__OID not found, database corrupted")
		}
		slot.Bucket = b
	})
	return slot.Bucket
}
